
#if 1
/*
    Display object for driving DSI device

    @file       QiCheng_dsi.c
    @ingroup
    @note       This panel MUST select IDE clock to PLL1 ( 480 ). Once change to \n
                another frequence, the _IDE_fDCLK should be re calculated

    Copyright   Novatek Microelectronics Corp. 2011.  All rights reserved.
*/

#include "display.h"
#include "dispdev_IFdsi.h"
#include "dispdev_panlcomn.h"

// Default debug level
#ifndef __DBGLVL__
#define __DBGLVL__  2       // Output all message by default. __DBGLVL__ will be set to 1 via make parameter when release code.
#endif

// Default debug filter
#ifndef __DBGFLT__
#define __DBGFLT__  "*"     // Display everything when debug level is 2
#endif

#include "DebugModule.h"

#define PANEL_WIDTH     400//1280
#define PANEL_HEIGHT    1280//400



#define HX8369B_IND_MSG(...)       debug_msg(__VA_ARGS__)

#define HX8369B_ERR_MSG(...)       debug_msg(__VA_ARGS__)

#define HX8369B_WRN_MSG(...)       debug_msg(__VA_ARGS__)

#define HX8369B_TE_OFF              0
#define HX8369B_TE_ON               1

#define HX8369B_TE_PACKET           0
#define HX8369B_TE_PIN              1

/*
    RGB888 = 1 pixel = 3bytes packet
    If DSI src = 240MHz, internal clock = 30MHz, data rate = 30MHz x 1bytes = 30MB / sec per lane
    2 lane = 60MB = 20Mpixel ' IDE need > 20MHz
*/


#define DSI_FORMAT_RGB565          0    //N/A in HX8369B
#define DSI_FORMAT_RGB666P         1    //N/A in HX8369B
#define DSI_FORMAT_RGB666L         2    //N/A in HX8369B
#define DSI_FORMAT_RGB888          3    //IDE use 480 & DSI use 480

#define DSI_PACKET_FORMAT          DSI_FORMAT_RGB888


#if 0
#define DSI_TARGET_CLK             480
#else
#if 1
#define DSI_TARGET_CLK             240
#else
#define DSI_TARGET_CLK             120
#endif
#endif


#if(DSI_PACKET_FORMAT == DSI_FORMAT_RGB888)
#if (DSI_TARGET_CLK == 480)
#define _IDE_fDCLK      60.00f //((((DSI_TARGET_CLK / 8) * 2)/3))
#else
#if (DSI_TARGET_CLK == 240)
#define _IDE_fDCLK      50.00f //24.00f// must > ((((DSI_TARGET_CLK / 8) * 2) / 3)) ->2: lane number
#else
#define _IDE_fDCLK      13.33f
#endif
#endif
#else
#error "Format not RGB888"
#endif

/*
VCI=3.3V;
IOVCC=1.8V/3.3V;

MIPI CLK Speed:349Mbps(175MHZ)
H blank porch:160
H front porch:160
H pulse width:24
V blank porch:10
V front porch:12
V pulse width:2
*/
#define HVALIDST    160 //0x39  //uiHSyncBackPorch(HPB) -> 53
#define VVALIDST    10  //0x15  //uiVSyncBackPorchOdd/Even
#define HSYNCT      24  //0x02
#define VSYNCT      0x02

#define ROTATE_180DEGREE      DISABLE//ENABLE//
/*
    Panel Parameters for TCON HX8369B
*/
//@{
/*Used in DSI*/
/*
MIPI command:
regw(0x10);
delay 120MS
regw(0xCD,0xAA);
regw(0x30,0x00);
regw(0x39,0x11);
regw(0x32,0x00);
regw(0x33,0x38);
regw(0x35,0x24);
regw(0x4F,0x35);//26
regw(0x4E,0x27);//13
regw(0x41,0x32);//VCOM36
regw(0x55,0x00,0x0F,0x00,0x0F,0x00,0x0F,0x00,0x0F);
regW(0x56,0x00,0x0F,0x00,0x0F,0x00,0x0F,0x00,0x0F,0x00,0x0F,0x00,0x0F,0x00,0x0F,0x00,0x0F);
regw(0x65,0x08);
regw(0x3A,0x08);
regw(0x36,0x49);
regw(0x67,0x82);
regw(0x69,0x20);
regw(0x6C,0x80);
regw(0x6D,0x01);
regw(0x53,0x1F,0x19,0x15,0x11,0x11,0x11,0x12,0x14,0x15,0x11,0x0D,0x0B,0x0B,0x0D,0x0C,0x0C,0x08,0x04,0x00);
regw(0x54,0x1F,0x19,0x15,0x11,0x11,0x11,0x13,0x15,0x16,0x11,0x0D,0x0C,0x0C,0x0E,0x0C,0x0C,0x08,0x04,0x00);
regw(0x6B,0x00);
regw(0x58,0x00);
regw(0x73,0xF0);
regw(0x76,0x40);
regw(0x77,0x00);//04
regw(0x74,0x17);
//regw(0x61,0x84);//
regw(0x5E,0x03);
regw(0x68,0x10);
regw(0x6A,0x00);
regw(0x28,0x31);
regw(0x29,0x21);
regw(0x63,0x04);//08
regw(0x27,0x00);
regw(0x7c,0x80);
regw(0x2e,0x05);//PWM
regw(0x4c,0x80);//VCSW1
regw(0x50,0xc0);
regw(0x78,0x6E);
regw(0x2D,0x31);
regw(0x49,0x00);//
regw(0x4D,0x00);

delay 120MS
regw(0x11);
*/

const tPANEL_CMD tCmdModeDSI[] =
{
    {DSICMD_CMD,    0x10},
    {DSICMD_DATA,   0x00},
    {CMDDELAY_MS,   10},

    {DSICMD_CMD,    0xCD},
    {DSICMD_DATA,   0xAA},
    {CMDDELAY_MS,   1},

    {DSICMD_CMD,    0x65},
    {DSICMD_DATA,   0xAC},
    {CMDDELAY_MS,   1},

    {DSICMD_CMD,    0x3A},
    {DSICMD_DATA,   0x14},
    {CMDDELAY_MS,   1},

    {DSICMD_CMD,    0x32},
    {DSICMD_DATA,   0x00},
    {CMDDELAY_MS,   1},

    {DSICMD_CMD,    0x36},
    {DSICMD_DATA,   0x02},
    {CMDDELAY_MS,   1},

    {DSICMD_CMD,    0x67},
    {DSICMD_DATA,   0x82},
    {CMDDELAY_MS,   1},

    {DSICMD_CMD,    0x69},
    {DSICMD_DATA,   0x20},/*26*/
    {CMDDELAY_MS,   1},

    {DSICMD_CMD,    0x6D},
    {DSICMD_DATA,   0x01},/*13*/
    {CMDDELAY_MS,   1},

    {DSICMD_CMD,    0x68},
    {DSICMD_DATA,   0x00},/*36*/
    {CMDDELAY_MS,   1},

    {DSICMD_CMD,    0x53},
    {DSICMD_DATA,   0x19},
    {DSICMD_DATA,   0x17},
    {DSICMD_DATA,   0x15},
    {DSICMD_DATA,   0x12},
    {DSICMD_DATA,   0x12},
    {DSICMD_DATA,   0x12},
    {DSICMD_DATA,   0x13},
    {DSICMD_DATA,   0x15},
    {DSICMD_DATA,   0x15},
    {DSICMD_DATA,   0x10},
    {DSICMD_DATA,   0x0C},
    {DSICMD_DATA,   0x0A},
    {DSICMD_DATA,   0x0A},
    {DSICMD_DATA,   0x0C},
    {DSICMD_DATA,   0x0B},
    {DSICMD_DATA,   0x0C},
    {DSICMD_DATA,   0x09},
    {DSICMD_DATA,   0x07},
    {DSICMD_DATA,   0x06},
    {CMDDELAY_MS,   1},


    {DSICMD_CMD,    0x54},
    {DSICMD_DATA,   0x19},
    {DSICMD_DATA,   0x16},
    {DSICMD_DATA,   0x14},
    {DSICMD_DATA,   0x11},
    {DSICMD_DATA,   0x11},
    {DSICMD_DATA,   0x11},
    {DSICMD_DATA,   0x13},
    {DSICMD_DATA,   0x15},
    {DSICMD_DATA,   0x15},
    {DSICMD_DATA,   0x10},
    {DSICMD_DATA,   0x0B},
    {DSICMD_DATA,   0x09},
    {DSICMD_DATA,   0x09},
    {DSICMD_DATA,   0x0B},
    {DSICMD_DATA,   0x0B},
    {DSICMD_DATA,   0x0C},
    {DSICMD_DATA,   0x09},
    {DSICMD_DATA,   0x07},
    {DSICMD_DATA,   0x06},
    {CMDDELAY_MS,   1},


    {DSICMD_CMD,    0x29},
    {DSICMD_DATA,   0x11},
    {CMDDELAY_MS,   1},

    {DSICMD_CMD,    0x2A},
    {DSICMD_DATA,   0x0C},
    {CMDDELAY_MS,   1},

    {DSICMD_CMD,    0x6C},
    {DSICMD_DATA,   0x81},
    {CMDDELAY_MS,   1},

    {DSICMD_CMD,    0x55},
    {DSICMD_DATA,   0x00},
    {DSICMD_DATA,   0x0F},
    {DSICMD_DATA,   0x00},
    {DSICMD_DATA,   0x0F},
    {DSICMD_DATA,   0x00},
    {DSICMD_DATA,   0x0F},
    {DSICMD_DATA,   0x00},
    {DSICMD_DATA,   0x0F},
    {CMDDELAY_MS,   1},

    {DSICMD_CMD,    0x56},
    {DSICMD_DATA,   0x12},
    {DSICMD_DATA,   0x1F},
    {DSICMD_DATA,   0x12},
    {DSICMD_DATA,   0x1F},
    {DSICMD_DATA,   0x12},
    {DSICMD_DATA,   0x1F},
    {DSICMD_DATA,   0x12},
    {DSICMD_DATA,   0x1F},
    {DSICMD_DATA,   0x12},
    {DSICMD_DATA,   0x1F},
    {DSICMD_DATA,   0x12},
    {DSICMD_DATA,   0x1F},
    {DSICMD_DATA,   0x12},
    {DSICMD_DATA,   0x1F},
    {DSICMD_DATA,   0x12},
    {DSICMD_DATA,   0x1F},
    {CMDDELAY_MS,   1},

    {DSICMD_CMD,    0x57},
    {DSICMD_DATA,   0x00},
    {DSICMD_DATA,   0x0F},
    {DSICMD_DATA,   0x00},
    {DSICMD_DATA,   0x0F},
    {CMDDELAY_MS,   1},

    {DSICMD_CMD,    0x30},
    {DSICMD_DATA,   0x00},
    {CMDDELAY_MS,   1},

    {DSICMD_CMD,    0x39},
    {DSICMD_DATA,   0x11},
    {CMDDELAY_MS,   1},

    {DSICMD_CMD,    0x33},
    {DSICMD_DATA,   0x08},
    {CMDDELAY_MS,   1},

    {DSICMD_CMD,    0x35},
    {DSICMD_DATA,   0x27},
    {CMDDELAY_MS,   1},

    {DSICMD_CMD,    0x4F},
    {DSICMD_DATA,   0x3D},
    {CMDDELAY_MS,   1},

    {DSICMD_CMD,    0x4E},
    {DSICMD_DATA,   0x35},
    {CMDDELAY_MS,   1},

    {DSICMD_CMD,    0x41},
    {DSICMD_DATA,   0x3F},//35
    {CMDDELAY_MS,   1},

    {DSICMD_CMD,    0x73},
    {DSICMD_DATA,   0x30},
    {CMDDELAY_MS,   1},

    {DSICMD_CMD,    0x74},
    {DSICMD_DATA,   0x10},
    {CMDDELAY_MS,   1},

    {DSICMD_CMD,    0x76},
    {DSICMD_DATA,   0x40},
    {CMDDELAY_MS,   1},

    {DSICMD_CMD,    0x77},
    {DSICMD_DATA,   0x00},
    {CMDDELAY_MS,   1},

    {DSICMD_CMD,    0x28},
    {DSICMD_DATA,   0x31},
    {CMDDELAY_MS,   1},

    {DSICMD_CMD,    0x7C},
    {DSICMD_DATA,   0x80},
    {CMDDELAY_MS,   1},

    {DSICMD_CMD,    0x2E},
    {DSICMD_DATA,   0x04},
    {CMDDELAY_MS,   1},

    {DSICMD_CMD,    0x4C},
    {DSICMD_DATA,   0x80},
    {CMDDELAY_MS,   1},

    {DSICMD_CMD,    0x47},
    {DSICMD_DATA,   0x16},/*XIUGAI*/
    {CMDDELAY_MS,   1},

    {DSICMD_CMD,    0x48},
    {DSICMD_DATA,   0x6C},
    {CMDDELAY_MS,   1},

    {DSICMD_CMD,    0x50},
    {DSICMD_DATA,   0xC0},
    {CMDDELAY_MS,   1},

    {DSICMD_CMD,    0x78},
    {DSICMD_DATA,   0x6E},
    {CMDDELAY_MS,   1},

    {DSICMD_CMD,    0x2D},
    {DSICMD_DATA,   0x31},
    {CMDDELAY_MS,   1},

    {DSICMD_CMD,    0x63},
    {DSICMD_DATA,   0x04},//04
    {CMDDELAY_MS,   1},
    
                {DSICMD_CMD,    0x61},
                {DSICMD_DATA,   0x84},
                {CMDDELAY_MS,   1},

                {DSICMD_CMD,    0x4D},
                {DSICMD_DATA,   0x00},
                {CMDDELAY_MS,   1},
    
    {DSICMD_CMD,    0x11},
    {DSICMD_DATA,   0x00},
    {CMDDELAY_MS,   150},

    //     {DSICMD_CMD,    0x29}, //Display On
    //    {CMDDELAY_MS,   150},
};


const tPANEL_CMD tCmdStandbyDSI[] =
{
    #if 0
    {DSICMD_CMD,     0x28},     // Display OFF
    {DSICMD_CMD,     0x10}      // Sleep in
    #endif
};

const tLCD_PARAM tModeDSI[] =
{
    /***********       MI Serial Format 1      *************/
    {
        // tPANEL_PARAM
        {
            /* Old prototype */
            PINMUX_DSI_4_LANE_VDO_SYNC_EVENT_RGB888,
            _IDE_fDCLK,                     //!< fDCLK
            #if 1 //(DSI_TARGET_CLK == 240)
            746,                            //!< uiHSyncTotalPeriod(HTOTAL)
            #else
            744,                            //!< uiHSyncTotalPeriod(HTOTAL)
            #endif
            PANEL_WIDTH,                    //!< uiHSyncActivePeriod(HACT)
            HVALIDST,                           //!< uiHSyncBackPorch(HBP)
            1304,                           //!< uiVSyncTotalPeriod(VTOTAL)
            PANEL_HEIGHT,                   //!< uiVSyncActivePeriod
            VVALIDST,                       //!< uiVSyncBackPorchOdd
            VVALIDST,                       //!< uiVSyncBackPorchEven
            #if 1
            PANEL_HEIGHT,                   //!< uiBufferWidth
            PANEL_WIDTH,                    //!< uiBufferHeight
            #else
            PANEL_WIDTH,                    //!< uiBufferWidth
            PANEL_HEIGHT,                   //!< uiBufferHeight
            #endif
            PANEL_WIDTH,                    //!< uiWindowWidth
            PANEL_HEIGHT,                   //!< uiWindowHeight
            FALSE,                          //!< bYCbCrFormat
            /* New added parameters */
            HSYNCT,                         //!< uiHSyncSYNCwidth
            VSYNCT                          //!< uiVSyncSYNCwidth
        },

        // tIDE_PARAM
        {
            /* Old prototype */
            PINMUX_LCD_SEL_GPIO,            //!< pinmux_select_lcd;
            ICST_CCIR601,                   //!< icst;
            {FALSE, FALSE},                  //!< dithering[2];
            DISPLAY_DEVICE_MIPIDSI,         //!< **DONT-CARE**
            IDE_PDIR_RGB,                   //!< pdir;
            IDE_LCD_R,                      //!< odd;
            IDE_LCD_G,                      //!< even;
            TRUE,                           //!< hsinv;
            TRUE,                           //!< vsinv;
            FALSE,                          //!< hvldinv;
            FALSE,                          //!< vvldinv;
            TRUE,                           //!< clkinv;
            FALSE,                          //!< fieldinv;
            FALSE,                          //!< **DONT-CARE**
            FALSE,                          //!< interlace;
            FALSE,                          //!< **DONT-CARE**
            0x40,                           //!< ctrst;
            0x00,                           //!< brt;
            0x40,                           //!< cmults;
            FALSE,                          //!< cex;
            FALSE,                          //!< **DONT-CARE**
            TRUE,                           //!< **DONT-CARE**
            TRUE,                           //!< tv_powerdown;
            {0x00,0x00},                    //!< **DONT-CARE**

            /* New added parameters */
            FALSE,                          //!< YCex
            FALSE,                          //!< HLPF
            {FALSE,FALSE,FALSE},            //!< subpixOdd[3]
            {FALSE,FALSE,FALSE},            //!< subpixEven[3]
            {IDE_DITHER_5BITS,IDE_DITHER_6BITS,IDE_DITHER_5BITS},//!< DitherBits[3]
            FALSE                           //!< clk1/2
        },

        (tPANEL_CMD*)tCmdModeDSI,                  //!< pCmdQueue
        sizeof(tCmdModeDSI)/sizeof(tPANEL_CMD),    //!< nCmd
    }
};

const tLCD_ROT *tRotDSI = NULL;

//@}

tLCD_ROT* dispdev_getLcdRotateDSICmd(UINT32 *ModeNumber)
{
    if(tRotDSI != NULL)
    {
        *ModeNumber = sizeof(tRotDSI)/sizeof(tLCD_ROT);
    }
    else
    {
        *ModeNumber = 0;
    }
    return (tLCD_ROT*)tRotDSI;
}

tLCD_PARAM* dispdev_getConfigModeDSI(UINT32 *ModeNumber)
{
    *ModeNumber = sizeof(tModeDSI)/sizeof(tLCD_PARAM);
    return (tLCD_PARAM*)tModeDSI;
}

tPANEL_CMD* dispdev_getStandbyCmdDSI(UINT32 *CmdNumber)
{
    *CmdNumber = sizeof(tCmdStandbyDSI)/sizeof(tPANEL_CMD);
    return (tPANEL_CMD*)tCmdStandbyDSI;
}


void dispdev_setDSIConfig(tDSI_CONFIG *pDsiConfig)
{
    dsi_setConfig(DSI_CONFIG_ID_FREQ, DSI_TARGET_CLK * 1000000);

    #if (DSI_TARGET_CLK == 480)
    dsi_setConfig(DSI_CONFIG_ID_TLPX, 3);
    dsi_setConfig(DSI_CONFIG_ID_BTA_TA_GO, 0x15);
    dsi_setConfig(DSI_CONFIG_ID_BTA_TA_SURE, 0);
    dsi_setConfig(DSI_CONFIG_ID_BTA_TA_GET, 0x14);

    dsi_setConfig(DSI_CONFIG_ID_THS_PREPARE, 4);
    dsi_setConfig(DSI_CONFIG_ID_THS_ZERO, 6);
    dsi_setConfig(DSI_CONFIG_ID_THS_TRAIL, 7);
    dsi_setConfig(DSI_CONFIG_ID_THS_EXIT, 6);

    dsi_setConfig(DSI_CONFIG_ID_TCLK_PREPARE, 2);
    dsi_setConfig(DSI_CONFIG_ID_TCLK_ZERO, 16);
    dsi_setConfig(DSI_CONFIG_ID_TCLK_POST, 16);
    dsi_setConfig(DSI_CONFIG_ID_TCLK_PRE, 2);
    dsi_setConfig(DSI_CONFIG_ID_TCLK_TRAIL, 3);

    dsi_setConfig(DSI_CONFIG_ID_CLK_PHASE_OFS, 0x4);
    dsi_setConfig(DSI_CONFIG_ID_PHASE_DELAY_ENABLE_OFS, 0x1);
#elif(DSI_TARGET_CLK == 240)  // To adjust...
    dsi_setConfig(DSI_CONFIG_ID_TLPX, 3);
    dsi_setConfig(DSI_CONFIG_ID_BTA_TA_GO, 0x15);
    dsi_setConfig(DSI_CONFIG_ID_BTA_TA_SURE, 0);
    dsi_setConfig(DSI_CONFIG_ID_BTA_TA_GET, 0x14);

    dsi_setConfig(DSI_CONFIG_ID_THS_PREPARE, 4);//4
    dsi_setConfig(DSI_CONFIG_ID_THS_ZERO, 6);
    dsi_setConfig(DSI_CONFIG_ID_THS_TRAIL, 7);
    dsi_setConfig(DSI_CONFIG_ID_THS_EXIT, 6);

    dsi_setConfig(DSI_CONFIG_ID_TCLK_PREPARE, 3);
    dsi_setConfig(DSI_CONFIG_ID_TCLK_ZERO, 16);
    dsi_setConfig(DSI_CONFIG_ID_TCLK_POST, 16);
    dsi_setConfig(DSI_CONFIG_ID_TCLK_PRE, 2);
    dsi_setConfig(DSI_CONFIG_ID_TCLK_TRAIL, 3);

    dsi_setConfig(DSI_CONFIG_ID_CLK_PHASE_OFS, 0x7);
    dsi_setConfig(DSI_CONFIG_ID_PHASE_DELAY_ENABLE_OFS, 0x1);
#elif(DSI_TARGET_CLK == 120)
    dsi_setConfig(DSI_CONFIG_ID_TLPX, 0);
    dsi_setConfig(DSI_CONFIG_ID_BTA_TA_GO, 3);

    dsi_setConfig(DSI_CONFIG_ID_THS_PREPARE, 1);
    dsi_setConfig(DSI_CONFIG_ID_THS_ZERO, 2);
    dsi_setConfig(DSI_CONFIG_ID_THS_TRAIL, 1);
    dsi_setConfig(DSI_CONFIG_ID_THS_EXIT, 1);

    dsi_setConfig(DSI_CONFIG_ID_TCLK_PREPARE, 0);
    dsi_setConfig(DSI_CONFIG_ID_TCLK_ZERO, 5);
    dsi_setConfig(DSI_CONFIG_ID_TCLK_POST, 8);
    dsi_setConfig(DSI_CONFIG_ID_TCLK_PRE, 1);
    dsi_setConfig(DSI_CONFIG_ID_TCLK_TRAIL, 1);
#elif(DSI_TARGET_CLK == 54)
    dsi_setConfig(DSI_CONFIG_ID_TLPX, 1);
    dsi_setConfig(DSI_CONFIG_ID_BTA_TA_GO, 4);

    dsi_setConfig(DSI_CONFIG_ID_THS_PREPARE, 1);
    dsi_setConfig(DSI_CONFIG_ID_THS_ZERO, 0);
    dsi_setConfig(DSI_CONFIG_ID_THS_TRAIL, 1);
    dsi_setConfig(DSI_CONFIG_ID_THS_EXIT, 4);

    dsi_setConfig(DSI_CONFIG_ID_TCLK_PREPARE, 0);
    dsi_setConfig(DSI_CONFIG_ID_TCLK_ZERO, 2);
    dsi_setConfig(DSI_CONFIG_ID_TCLK_POST, 0);
    dsi_setConfig(DSI_CONFIG_ID_TCLK_PRE, 1);
    dsi_setConfig(DSI_CONFIG_ID_TCLK_TRAIL, 1);
    #endif


    #if 0 // 2 lanes.
//#if (HX8369B_CFG_LANE == HX8369B_CFG_1_LANE)
//    dsi_setConfig(DSI_CONFIG_ID_DATALANE_NO, DSI_DATA_LANE_0);
//#else
    dsi_setConfig(DSI_CONFIG_ID_DATALANE_NO, DSI_DATA_LANE_1);
//#endif
    //dsi_setConfig(DSI_CONFIG_ID_TE_BTA_INTERVAL, 0x1F);

    dsi_setConfig(DSI_CONFIG_ID_CLK_LP_CTRL, 0x1);
    //dsi_setConfig(DSI_CONFIG_ID_SYNC_DLY_CNT, 0xF);

    dsi_setConfig(DSI_CONFIG_ID_EOT_PKT_EN, 0);
    #else // 4 lanes.
    dsi_setConfig(DSI_CONFIG_ID_DATALANE_NO, DSI_DATA_LANE_3);
    #if 0
    dsi_setConfig(DSI_CONFIG_ID_TE_BTA_INTERVAL, 0x1F);
    #endif
    //dsi_setConfig(DSI_CONFIG_ID_CLK_PHASE_OFS, 0x3);
    //dsi_setConfig(DSI_CONFIG_ID_PHASE_DELAY_ENABLE_OFS, 0x1);

    dsi_setConfig(DSI_CONFIG_ID_CLK_LP_CTRL, 0x1);
    #if 0
    dsi_setConfig(DSI_CONFIG_ID_SYNC_DLY_CNT, 0xF);
    #endif

    dsi_setConfig(DSI_CONFIG_ID_EOT_PKT_EN, 0);  // Need to set TRUE??
    #endif
}

#else

#endif
